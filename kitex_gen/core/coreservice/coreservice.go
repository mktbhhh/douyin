// Code generated by Kitex v0.3.1. DO NOT EDIT.

package coreservice

import (
	"context"
	"douyin/kitex_gen/core"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return coreServiceServiceInfo
}

var coreServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CoreService"
	handlerType := (*core.CoreService)(nil)
	methods := map[string]kitex.MethodInfo{
		"DouyinFeed":          kitex.NewMethodInfo(douyinFeedHandler, newDouyinFeedArgs, newDouyinFeedResult, false),
		"DouyinPublishAction": kitex.NewMethodInfo(douyinPublishActionHandler, newDouyinPublishActionArgs, newDouyinPublishActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func douyinFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.DouyinFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.CoreService).DouyinFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DouyinFeedArgs:
		success, err := handler.(core.CoreService).DouyinFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DouyinFeedResult)
		realResult.Success = success
	}
	return nil
}
func newDouyinFeedArgs() interface{} {
	return &DouyinFeedArgs{}
}

func newDouyinFeedResult() interface{} {
	return &DouyinFeedResult{}
}

type DouyinFeedArgs struct {
	Req *core.DouyinFeedRequest
}

func (p *DouyinFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DouyinFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DouyinFeedArgs) Unmarshal(in []byte) error {
	msg := new(core.DouyinFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DouyinFeedArgs_Req_DEFAULT *core.DouyinFeedRequest

func (p *DouyinFeedArgs) GetReq() *core.DouyinFeedRequest {
	if !p.IsSetReq() {
		return DouyinFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DouyinFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type DouyinFeedResult struct {
	Success *core.DouyinFeedResponse
}

var DouyinFeedResult_Success_DEFAULT *core.DouyinFeedResponse

func (p *DouyinFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DouyinFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DouyinFeedResult) Unmarshal(in []byte) error {
	msg := new(core.DouyinFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DouyinFeedResult) GetSuccess() *core.DouyinFeedResponse {
	if !p.IsSetSuccess() {
		return DouyinFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DouyinFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.DouyinFeedResponse)
}

func (p *DouyinFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func douyinPublishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core.DouyinPublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core.CoreService).DouyinPublishAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DouyinPublishActionArgs:
		success, err := handler.(core.CoreService).DouyinPublishAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DouyinPublishActionResult)
		realResult.Success = success
	}
	return nil
}
func newDouyinPublishActionArgs() interface{} {
	return &DouyinPublishActionArgs{}
}

func newDouyinPublishActionResult() interface{} {
	return &DouyinPublishActionResult{}
}

type DouyinPublishActionArgs struct {
	Req *core.DouyinPublishActionRequest
}

func (p *DouyinPublishActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DouyinPublishActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DouyinPublishActionArgs) Unmarshal(in []byte) error {
	msg := new(core.DouyinPublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DouyinPublishActionArgs_Req_DEFAULT *core.DouyinPublishActionRequest

func (p *DouyinPublishActionArgs) GetReq() *core.DouyinPublishActionRequest {
	if !p.IsSetReq() {
		return DouyinPublishActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DouyinPublishActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type DouyinPublishActionResult struct {
	Success *core.DouyinPublishActionResponse
}

var DouyinPublishActionResult_Success_DEFAULT *core.DouyinPublishActionResponse

func (p *DouyinPublishActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DouyinPublishActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DouyinPublishActionResult) Unmarshal(in []byte) error {
	msg := new(core.DouyinPublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DouyinPublishActionResult) GetSuccess() *core.DouyinPublishActionResponse {
	if !p.IsSetSuccess() {
		return DouyinPublishActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DouyinPublishActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*core.DouyinPublishActionResponse)
}

func (p *DouyinPublishActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DouyinFeed(ctx context.Context, Req *core.DouyinFeedRequest) (r *core.DouyinFeedResponse, err error) {
	var _args DouyinFeedArgs
	_args.Req = Req
	var _result DouyinFeedResult
	if err = p.c.Call(ctx, "DouyinFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinPublishAction(ctx context.Context, Req *core.DouyinPublishActionRequest) (r *core.DouyinPublishActionResponse, err error) {
	var _args DouyinPublishActionArgs
	_args.Req = Req
	var _result DouyinPublishActionResult
	if err = p.c.Call(ctx, "DouyinPublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
